// Generated by gencpp from file aut_sys/lines.msg
// DO NOT EDIT!


#ifndef AUT_SYS_MESSAGE_LINES_H
#define AUT_SYS_MESSAGE_LINES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aut_sys
{
template <class ContainerAllocator>
struct lines_
{
  typedef lines_<ContainerAllocator> Type;

  lines_()
    : leftLine(false)
    , midLine(false)
    , rightLine(false)  {
    }
  lines_(const ContainerAllocator& _alloc)
    : leftLine(false)
    , midLine(false)
    , rightLine(false)  {
  (void)_alloc;
    }



   typedef uint8_t _leftLine_type;
  _leftLine_type leftLine;

   typedef uint8_t _midLine_type;
  _midLine_type midLine;

   typedef uint8_t _rightLine_type;
  _rightLine_type rightLine;





  typedef boost::shared_ptr< ::aut_sys::lines_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aut_sys::lines_<ContainerAllocator> const> ConstPtr;

}; // struct lines_

typedef ::aut_sys::lines_<std::allocator<void> > lines;

typedef boost::shared_ptr< ::aut_sys::lines > linesPtr;
typedef boost::shared_ptr< ::aut_sys::lines const> linesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aut_sys::lines_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aut_sys::lines_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aut_sys::lines_<ContainerAllocator1> & lhs, const ::aut_sys::lines_<ContainerAllocator2> & rhs)
{
  return lhs.leftLine == rhs.leftLine &&
    lhs.midLine == rhs.midLine &&
    lhs.rightLine == rhs.rightLine;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aut_sys::lines_<ContainerAllocator1> & lhs, const ::aut_sys::lines_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aut_sys

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aut_sys::lines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aut_sys::lines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aut_sys::lines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aut_sys::lines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aut_sys::lines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aut_sys::lines_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aut_sys::lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7071dad4f368d2425bf5a95ab6e8d6ce";
  }

  static const char* value(const ::aut_sys::lines_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7071dad4f368d242ULL;
  static const uint64_t static_value2 = 0x5bf5a95ab6e8d6ceULL;
};

template<class ContainerAllocator>
struct DataType< ::aut_sys::lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aut_sys/lines";
  }

  static const char* value(const ::aut_sys::lines_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aut_sys::lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool leftLine\n"
"bool midLine\n"
"bool rightLine\n"
;
  }

  static const char* value(const ::aut_sys::lines_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aut_sys::lines_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftLine);
      stream.next(m.midLine);
      stream.next(m.rightLine);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lines_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aut_sys::lines_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aut_sys::lines_<ContainerAllocator>& v)
  {
    s << indent << "leftLine: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leftLine);
    s << indent << "midLine: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.midLine);
    s << indent << "rightLine: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rightLine);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUT_SYS_MESSAGE_LINES_H
