// Generated by gencpp from file aut_sys/leds.msg
// DO NOT EDIT!


#ifndef AUT_SYS_MESSAGE_LEDS_H
#define AUT_SYS_MESSAGE_LEDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aut_sys
{
template <class ContainerAllocator>
struct leds_
{
  typedef leds_<ContainerAllocator> Type;

  leds_()
    : r1(0)
    , r2(0)
    , r3(0)
    , g1(0)
    , g2(0)
    , g3(0)
    , b1(0)
    , b2(0)
    , b3(0)  {
    }
  leds_(const ContainerAllocator& _alloc)
    : r1(0)
    , r2(0)
    , r3(0)
    , g1(0)
    , g2(0)
    , g3(0)
    , b1(0)
    , b2(0)
    , b3(0)  {
  (void)_alloc;
    }



   typedef uint8_t _r1_type;
  _r1_type r1;

   typedef uint8_t _r2_type;
  _r2_type r2;

   typedef uint8_t _r3_type;
  _r3_type r3;

   typedef uint8_t _g1_type;
  _g1_type g1;

   typedef uint8_t _g2_type;
  _g2_type g2;

   typedef uint8_t _g3_type;
  _g3_type g3;

   typedef uint8_t _b1_type;
  _b1_type b1;

   typedef uint8_t _b2_type;
  _b2_type b2;

   typedef uint8_t _b3_type;
  _b3_type b3;





  typedef boost::shared_ptr< ::aut_sys::leds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aut_sys::leds_<ContainerAllocator> const> ConstPtr;

}; // struct leds_

typedef ::aut_sys::leds_<std::allocator<void> > leds;

typedef boost::shared_ptr< ::aut_sys::leds > ledsPtr;
typedef boost::shared_ptr< ::aut_sys::leds const> ledsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aut_sys::leds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aut_sys::leds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aut_sys::leds_<ContainerAllocator1> & lhs, const ::aut_sys::leds_<ContainerAllocator2> & rhs)
{
  return lhs.r1 == rhs.r1 &&
    lhs.r2 == rhs.r2 &&
    lhs.r3 == rhs.r3 &&
    lhs.g1 == rhs.g1 &&
    lhs.g2 == rhs.g2 &&
    lhs.g3 == rhs.g3 &&
    lhs.b1 == rhs.b1 &&
    lhs.b2 == rhs.b2 &&
    lhs.b3 == rhs.b3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aut_sys::leds_<ContainerAllocator1> & lhs, const ::aut_sys::leds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aut_sys

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aut_sys::leds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aut_sys::leds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aut_sys::leds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aut_sys::leds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aut_sys::leds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aut_sys::leds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aut_sys::leds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0922e2641925161f827e709fa80313c4";
  }

  static const char* value(const ::aut_sys::leds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0922e2641925161fULL;
  static const uint64_t static_value2 = 0x827e709fa80313c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::aut_sys::leds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aut_sys/leds";
  }

  static const char* value(const ::aut_sys::leds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aut_sys::leds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 r1\n"
"uint8 r2\n"
"uint8 r3\n"
"uint8 g1\n"
"uint8 g2\n"
"uint8 g3\n"
"uint8 b1\n"
"uint8 b2\n"
"uint8 b3\n"
;
  }

  static const char* value(const ::aut_sys::leds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aut_sys::leds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
      stream.next(m.g1);
      stream.next(m.g2);
      stream.next(m.g3);
      stream.next(m.b1);
      stream.next(m.b2);
      stream.next(m.b3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aut_sys::leds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aut_sys::leds_<ContainerAllocator>& v)
  {
    s << indent << "r1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r3);
    s << indent << "g1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g1);
    s << indent << "g2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g2);
    s << indent << "g3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g3);
    s << indent << "b1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b1);
    s << indent << "b2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b2);
    s << indent << "b3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUT_SYS_MESSAGE_LEDS_H
